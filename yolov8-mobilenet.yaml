# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 4  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.33, 1024]  # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, TimmBackbone, ['mobilenetv3_small_050']]
  - [0, 1, FeatureLayerExtractor, [0, 16]] # 100: 16, 050: 16
  - [0, 1, FeatureLayerExtractor, [1, 8]] # 100: 16, 050: 8
  - [0, 1, FeatureLayerExtractor, [2, 16]] # 100: 24, 050: 16
  - [0, 1, FeatureLayerExtractor, [3, 24]] # 100: 48, 050: 24
  - [0, 1, FeatureLayerExtractor, [4, 288]] # 100: 576, 050: 288
  - [-1, 1, SPPF, [576, 5]] # layer 6

# YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 4], 1, Concat, [1]]  # cat backbone P4
  - [-1, 1, C2f, [512]]  # 9

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
  - [[-1, 3], 1, Concat, [1]]  # cat head P4
  - [-1, 1, C2f, [256]]  # 12 (P4/16-medium)

  - [-1, 1, Conv, [64, 3, 2]]
  - [[-1, 4], 1, Concat, [1]]  # cat head P5
  - [-1, 3, C2f, [256]]  # 15 (P5/32-large)

  - [-1, 1, Conv, [64, 3, 2]]
  - [[-1, 6], 1, Concat, [1]]  # cat head P5
  - [-1, 3, C2f, [512]]  # 18 (P5/32-large)

  - [[12, 15, 18], 1, Detect, [nc]]  # Detect(P3, P4, P5)
